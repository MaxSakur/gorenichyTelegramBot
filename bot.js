// bot.js
// –¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç ¬´–ü—è—Ç–∞—á–æ–∫¬ª ‚Äì –ø–æ–≥–æ–¥–∞, –∫—É—Ä—Å—ã, –î–† –∏ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏
// -------------------------------------------------------

const TelegramBot = require("node-telegram-bot-api");
const cron          = require("node-cron");
const dayjs         = require("dayjs");
const axios         = require("axios");
require("dotenv").config();

require("dayjs/locale/ru");
dayjs.locale("ru");

const { getBirthdays, getHolidays } = require("./google");

// -----------------------------------------------------------------------------
// –ù–∞—Å—Ç—Ä–æ–π–∫–∏
// -----------------------------------------------------------------------------
const TOKEN            = process.env.TELEGRAM_BOT_TOKEN;
const CHAT_ID          = process.env.CHAT_ID;          // –≥—Ä—É–ø–ø–∞/–∫–∞–Ω–∞–ª
const CRON_HOUR_KYIV   = 9;
const CRON_MINUTE      = 0;
const TZ               = "Europe/Kyiv";

// -----------------------------------------------------------------------------
// –£—Ç–∏–ª–∏—Ç—ã
// -----------------------------------------------------------------------------
const startOfDay = d => d.startOf("day");

const pickClosestForecast = (forecasts, targetHour) => {
  if (!forecasts?.length) return undefined;
  const target = dayjs().hour(targetHour).minute(0).second(0);

  return forecasts.reduce((closest, curr) => {
    const currTime    = dayjs(curr.dt_txt);
    const closestTime = dayjs(closest.dt_txt);
    return Math.abs(currTime.diff(target)) < Math.abs(closestTime.diff(target))
      ? curr
      : closest;
  }, forecasts[0]);
};

const getWeatherEmoji = desc => {
  const d = desc.toLowerCase();
  if (d.includes("–¥–æ–∂–¥") || d.includes("–ª–∏–≤–µ–Ω—å")) return "üåß";
  if (d.includes("–æ–±–ª–∞—á–Ω–æ"))                     return "‚òÅÔ∏è";
  if (d.includes("—è—Å–Ω–æ"))                        return "‚òÄÔ∏è";
  if (d.includes("—Å–Ω–µ–≥"))                        return "‚ùÑÔ∏è";
  if (d.includes("–≥—Ä–æ–∑–∞"))                       return "‚õà";
  if (d.includes("–≤–µ—Ç–µ—Ä"))                       return "üå¨";
  return "üå§";
};

const formatTemp = t =>
  typeof t === "number" ? (t > 0 ? `+${Math.round(t)}` : `${Math.round(t)}`) : "‚Äî";

const capitalize = txt => txt.charAt(0).toUpperCase() + txt.slice(1);

// -----------------------------------------------------------------------------
// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
// -----------------------------------------------------------------------------
const bot = new TelegramBot(TOKEN, { polling: true });

bot.on("message", m => console.log("Chat ID:", m.chat.id));

// -----------------------------------------------------------------------------
// –ö–æ–º–∞–Ω–¥–∞ /start
// -----------------------------------------------------------------------------
bot.onText(/\/start/, async msg => {
  const chatId = msg.chat.id;

  const [weather, currencyMsg, birthdayMsg, holidayMsg] = await Promise.all([
    getWeatherForecast(),
    getCurrencyRates(),
    getNearestBirthdayMessage(),
    getNearestHolidayMessage()
  ]);

  const parts = [
    "üëã –ü—Ä–∏–≤–µ—Ç, –ø—è—Ç–∞—á–æ–∫!",
    `–°–µ–≥–æ–¥–Ω—è - ${weather}`,
    currencyMsg,
    birthdayMsg
  ];
  if (holidayMsg) parts.push(holidayMsg);

  bot.sendMessage(chatId, parts.join("\n\n"), { parse_mode: "Markdown" });
});

// -----------------------------------------------------------------------------
// –ö–Ω–æ–ø–∫–∏-callback
// -----------------------------------------------------------------------------
bot.on("callback_query", async ({ data, message, id }) => {
  const chatId = message.chat.id;

  if (data === "nearest_birthday")
    bot.sendMessage(chatId, await getNearestBirthdayMessage());

  if (data === "nearest_holiday")
    bot.sendMessage(chatId, await getNearestHolidayMessage(), { parse_mode: "Markdown" });

  bot.answerCallbackQuery(id);
});

// -----------------------------------------------------------------------------
// –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞
// -----------------------------------------------------------------------------
cron.schedule(`${CRON_MINUTE} ${CRON_HOUR_KYIV} * * *`, async () => {
  try {
    await checkBirthdaysAndHolidays();

    const [weather, currencyMsg, birthdayMsg, holidayMsg] = await Promise.all([
      getWeatherForecast(),
      getCurrencyRates(),
      getNearestBirthdayMessage(),
      getNearestHolidayMessage()
    ]);

    const parts = [
      "üëã –î–æ–±—Ä—ã–π –¥–µ–Ω—å, –ø—è—Ç–∞—á–µ–∫!",
      `–°–µ–≥–æ–¥–Ω—è - ${weather}`,
      currencyMsg,
      birthdayMsg
    ];
    if (holidayMsg) parts.push(holidayMsg);

    await bot.sendMessage(CHAT_ID, parts.join("\n\n"), { parse_mode: "Markdown" });
    console.log("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞");
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤ cron-–∑–∞–¥–∞—á–µ:", err);
  }
}, { timezone: TZ });

// -----------------------------------------------------------------------------
// –ü–æ–≥–æ–¥–∞
// -----------------------------------------------------------------------------
async function getWeatherForecast() {
  const apiKey = process.env.OPENWEATHER_API_KEY;
  const lat    = 50.4366;
  const lon    = 30.2353;

  try {
    const { data } = await axios.get(
      `https://api.openweathermap.org/data/2.5/forecast?lat=${lat}&lon=${lon}&units=metric&lang=ru&appid=${apiKey}`
    );

    const today    = dayjs().format("YYYY-MM-DD");
    const tomorrow = dayjs().add(1, "day").format("YYYY-MM-DD");

    const todayForecasts    = data.list.filter(e => e.dt_txt.startsWith(today));
    const tomorrowForecasts = data.list.filter(e => e.dt_txt.startsWith(tomorrow));

    const dayForecast   = pickClosestForecast(todayForecasts, 12);
    const nightForecast = pickClosestForecast(tomorrowForecasts, 3);

    const dayDesc = dayForecast?.weather?.[0]?.description || "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö";
    const icon    = getWeatherEmoji(dayDesc);
    const dayTemp   = dayForecast?.main?.temp;
    const nightTemp = nightForecast?.main?.temp;
    const clouds    = dayForecast?.clouds?.all;
    const wind      = dayForecast?.wind?.speed;

    const dateText = `${icon} *${capitalize(dayjs().format("dddd, D MMMM"))}*`;

    return `${dateText}\n–ü–æ–≥–æ–¥–∞: ${capitalize(dayDesc)}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: –¥–Ω—ë–º ${formatTemp(dayTemp)}¬∞ / –Ω–æ—á—å—é ${formatTemp(nightTemp)}¬∞\n‚òÅÔ∏è –û–±–ª–∞—á–Ω–æ—Å—Ç—å: ${clouds ?? "‚Äî"}%\nüå¨ –í–µ—Ç–µ—Ä: ${wind ?? "‚Äî"} –º/—Å`;
  } catch {
    return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã";
  }
}

// -----------------------------------------------------------------------------
// –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –ù–ë–£
// -----------------------------------------------------------------------------
async function getCurrencyRates() {
  const url = process.env.NBU_API_URL
    || "https://bank.gov.ua/NBUStatService/v1/statdirectory/exchangenew?json";

  try {
    const { data } = await axios.get(url);
    const usd = data.find(c => c.cc === "USD");
    const eur = data.find(c => c.cc === "EUR");
    const pln = data.find(c => c.cc === "PLN");

    return `üí± *–ö—É—Ä—Å –≤–∞–ª—é—Ç –ù–ë–£:*\nüá∫üá∏ USD: ${usd?.rate?.toFixed(2)} ‚Ç¥\nüá™üá∫ EUR: ${eur?.rate?.toFixed(2)} ‚Ç¥\nüáµüá± PLN: ${pln?.rate?.toFixed(2)} ‚Ç¥`;
  } catch {
    return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç";
  }
}

// -----------------------------------------------------------------------------
// –ë–ª–∏–∂–∞–π—à–∏–µ –î–†
// -----------------------------------------------------------------------------
async function getNearestBirthdayMessage() {
  const birthdays = await getBirthdays();
  const today     = startOfDay(dayjs());

  const upcoming = birthdays
    .map(({ name, date }) => {
      const monthDay = date.format("MM-DD");
      let bday = dayjs(`${today.year()}-${monthDay}`, "YYYY-MM-DD");
      if (bday.isBefore(today, "day")) bday = bday.add(1, "year");
      return { name, date: bday };
    })
    .sort((a, b) => a.date.diff(b.date));

  const nearestDate = upcoming[0]?.date;
  const nearest     = upcoming.filter(b => b.date.isSame(nearestDate, "day"));

  if (!nearest.length) return "üéÇ –ë–ª–∏–∂–∞–π—à–∏—Ö –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏–π –Ω–µ—Ç";

  const msg = nearest
    .map(b => {
      const daysLeft = startOfDay(b.date).diff(today, "day");
      return `üë§ ${b.name} ‚Äî ${b.date.format("DD.MM")} (—á–µ—Ä–µ–∑ ${daysLeft} –¥–Ω.)`;
    })
    .join("\n");

  return `üìÖ *–ë–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è:*\n${msg}`;
}

// -----------------------------------------------------------------------------
// –ü—Ä–∞–∑–¥–Ω–∏–∫–∏ —Å–µ–≥–æ–¥–Ω—è
// -----------------------------------------------------------------------------
async function getNearestHolidayMessage() {
  const holidays = await getHolidays();
  const todayKey = dayjs().format("MM-DD");

  const todayHolidays = holidays.filter(h => h.date === todayKey);
  if (!todayHolidays.length) return "";

  const list = todayHolidays.map(h => `üéä ${h.name}`).join("\n");
  return `üìÖ *–ü—Ä–∞–∑–¥–Ω–∏–∫–∏ —Å–µ–≥–æ–¥–Ω—è (${dayjs().format("DD.MM.YYYY")}):*\n${list}`;
}

// -----------------------------------------------------------------------------
// –ù–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞ –æ –î–†
// -----------------------------------------------------------------------------
async function checkBirthdaysAndHolidays() {
  const today     = startOfDay(dayjs());
  const birthdays = await getBirthdays();

  birthdays.forEach(({ name, date }) => {
    const bday = dayjs(`${today.year()}-${date.format("MM-DD")}`, "YYYY-MM-DD");
    const diff = startOfDay(bday).diff(today, "day");

    let msg = "";
    if (diff === 7) msg = `üéâ –ß–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é —É ${name} –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è!`;
    else if (diff === 3) msg = `üéà –ß–µ—Ä–µ–∑ 3 –¥–Ω—è —É ${name} –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è!`;
    else if (diff === 1) msg = `üéÅ –ó–∞–≤—Ç—Ä–∞ —É ${name} –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è!`;
    else if (diff === 0) msg = `üéÇ –°–µ–≥–æ–¥–Ω—è —É ${name} –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è!`;

    if (msg) bot.sendMessage(CHAT_ID, msg);
  });
}

console.log("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω ‚úÖ");